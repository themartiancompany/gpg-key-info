#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  target_key=""
  output_type=""
  key_type=""
  gnupg_home=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "gpg" \
    "gnupg"
  _check_cmd \
    "grep"
}

_gpg_import_show_key() {
  local \
    _key="${1}"
  cat \
    "${_key}" | \
    GNUPGHOME="${_gnupg_home}" \
    gpg \
      --homedir "${_gnupg_home}" \
      --import-options \
        show-only \
      --import \
      --keyid-format="long" \
      --with-colons \
      2>/dev/null
}

_secret_key_check() {
  local \
    _key="${1}" \
    _msg=() \
    _results
  _results="$( \
    _gpg_import_show_key \
      "${_key}" | \
      grep \
        -c \
        -e \
          "^sec:" \
        -e \
          "^ssb:" || \
    true)"
  if (( 0 < "${_results}" )); then
    _msg=(
      "the key file '${_key}' contains"
      "a secret key."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_keys_amount_get() {
  local \
    _key="${1}"
  _gpg_import_show_key \
    "${_key}" | \
    grep \
      -c \
      "^pub:"
}

_key_file_check() {
  local \
    _key="${1}" \
    _msg=() \
    _keys_amount
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Input target key file '${_key}'"
      "does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _secret_key_check \
    "${_key}"
  _keys_amount="$( \
    _keys_amount_get \
      "${_key}")"
  if (( 1 < "${_keys_amount}" )); then
    _msg=(
      "please publish only one public key at"
      "a time."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if (( 0 == "${_keys_amount}" )); then
    _msg=(
      "Input target key file '${_key}'"
      "does not not contains public keys."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_fingerprint_get() {
  local \
    _key="${1}" \
    _short_fingerprint \
    _fingerprint \
    _fingerprints=() \
    _fingerprint_matches=() \
    _msg=()
  _short_fingerprint="$( \
    _gpg_import_show_key \
      "${_key}" | \
      grep \
        -e \
          "^pub:" | \
        awk \
          -F \
            ":" \
          '{print $5}')"
  _fingerprints=( $( \
    _gpg_import_show_key \
      "${_key}" | \
      grep \
        -e \
          "^fpr:" |
        awk \
          -F \
            ":" \
          '{print $10}')
  )
  for _fingerprint in "${_fingerprints[@]}"; do
    if [[ "${_fingerprint}" == *"${_short_fingerprint}" ]]; then
      _fingerprint_matches+=(
        "${_fingerprint}"
      )
    fi
  done
  if (( 0 == "${#_fingerprint_matches[@]}" )); then
    _msg=(
      "somehow the short public key fingerprint does not match"
      "any full key fingerprint, please check the key file."
    )
    _msg_error \
      "${_msg[*]}" \ 
      1
  elif (( 1 < "${#_fingerprint_matches[@]}" )); then
    _msg=(
      "somehow the short public key fingerprint identify"
      "more than a single full key fingerprint,"
      "please check the key file."
    )
    _msg_error \
      "${_msg[*]}" \ 
      1
  elif (( 1 == "${#_fingerprint_matches[@]}" )); then
    echo \
      "${_fingerprint_matches}"
  fi
}

_id_get() {
  local \
    _key="${1}" \
    _user_id \
    _user_id_packet_string \
    _user_id_dirty
  _user_id_packet_string="$( \
    cat \
      "${_key}" | \
      gpg \
        --list-packets \
        2>/dev/null | \
        grep \
          "^:user ID packet")"
  _user_id_dirty="${_user_id_packet_string#:user ID packet: \"}"
  _user_id="${_user_id_dirty%\"}"
  echo \
    "${_user_id}"
}

_name_get() {
  local \
    _key="${1}" \
    _name_rev \
    _user_id \
    _user_id_rev
  _user_id="$( \
    _id_get \
      "${_key}")"
  _user_id_rev="$( \
    echo \
      "${_user_id}" | \
      rev)"
  _name_rev="${_user_id_rev#*< }"
  echo \
    "${_name_rev}" | \
    rev
}

_email_get() {
  local \
    _key="${1}" \
    _email_dirty \
    _user_id \
    _pattern
  _user_id="$( \
    _id_get \
      "${_key}")"
  _pattern="$( \
    _name_get \
      "${_key}") <"
  _email_dirty="${_user_id//"${_pattern}"}"
  echo \
    "${_email_dirty%>}"
}

_gpg_key_info() {
  local \
    _key="${1}" \
    _output_type="${2}" \
    _key_type="${3}" \
    _gnupg_home="${4}"
  _key_file_check \
    "${_key}"
  if [[ "${_key_type}" == "public" ]]; then
    "_${_output_type}_get" \
       "${_key}"
  elif [[ "${_key_type}" == "private" ]]; then
    _msg_error \
      "not implemented" \
      1
  fi
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "output" \
    "type" \
    "fingerprint"
  _set_override \
    "key" \
    "type" \
    "public"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.gnupg"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Retrieves info from a GNU Privacy Guard key file

Usage:
  $(_get "app" "name")
    [options]
    <key>

  options:
     -o <output_type>       Can be 'fingerprint', 'id', 'name'
                            or 'email'.
                            Default: $(_get "output" "type")
     -t <key_type>          Can be 'public' or 'private'.
                            Default: $(_get "key" "type")
     -H <gnupg_home>        GnuPG configuration directory.
                            Default: $(_get "gnupg" "home")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "call" "date")"
  _msg_info "              Output type:   $(_get "output" "type")"
  _msg_info "                 Key type:   $(_get "key" "type")"
  _msg_info "          GNUPG directory:   $(_get "gnupg" "home")"
  _msg_info "               Target key:   $(_get "target" "key")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'o:t:H:cvh?' \
    arg; do
  case \
    "${arg}" in
    o) override_output_type="${OPTARG}" ;;
    t) override_key_type="${OPTARG}" ;;
    H) override_gpg_home="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no input key given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "key" \
    "$(realpath \
         "${1}")"
fi
shift \
  1 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "$(_get \
       "target" \
       "key")"
  "$(_get \
       "output" \
       "type")"
  "$(_get \
       "key" \
       "type")"
  "$(_get \
       "gnupg" \
       "home")"
)
_gpg_key_info \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
